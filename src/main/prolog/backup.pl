/*

 * Author: Chiara Leonori
 * E-Mail: chiaraleonori@gmail.com
 * Title:  backup.pl

 Description:
 Enables to create a backup file for rating and wine databases.
 All the entries in the DB will be exported in a plain txt file.
*/
:- module(backup,
          [ createBackup/0
          ]).

:- use_module(module_db_rating).
:- use_module(module_db_wine).
:- ensure_loaded(characteristics).


backup_header(wine, "/*

 * Author: Automatic generated by WINOLOGY.
 * Title:  wine.backup

 Description:
 Backup file of wines DB, automatic generated by WINOLOGY.
 */"
 ).

backup_header(rating, "/*

 * Author: Automatic generated by WINOLOGY.
 * Title:  rating.backup

 Description:
 Backup file of ratings DB, automatic generated by WINOLOGY.
 */"
 ).


backup_file(wine, 'wine.backup').
backup_file(rating, 'rating.backup').

/* createBackup
 create a backup file for all the entries in the wine DB and a backup
 file for all the entries in the ratings DB.
 */
createBackup :-
    findall(rating(Wine, X), get_rating(rating(Wine, X)), Ratings),
    exportEntriesToFile(Ratings, rating),
    findall(wineDescription(Wine, X), get_wine(wineDescription(Wine, X)), Wines),
    exportEntriesToFile(Wines, wine).

/* exportEntriesToFile(+Entries, +Type)
 export all the specific entries of given type (wine or
 rating) to the related backup file, adding an header at the beginning
 of the file. File will be created if it does not exist.
 */
exportEntriesToFile(Entries, Type):-
    backup_file(Type, FileName),
    open(FileName, write, File),
    backup_header(Type, Header),
    writeln(File, Header),
    writeEntries(File, Entries),
    close(File).

getFilePath(FilePath, FullFilePath) :-
    \+ is_absolute_file_name(FilePath),
    prolog_load_context(directory, Cwd),
    atomic_list_concat([Cwd, /, FilePath], FullFilePath),
    asserta(user:file_search_path(image, FullFilePath)).
getFilePath(FilePath) :-
    asserta(user:file_search_path(image, FilePath)).

/* writeEntries(+File, +EntryList)
 write all the entries in the list into a file.
 */
writeEntries(_File, []) :- !.
writeEntries(File, [Entry|T]) :-
    writeLine(File, Entry),
    writeEntries(File, T).

/* writeLine(+File, +Line)
 write specific line into file, adding a return line at the end
 */
writeLine(File, Line) :-
    write(File, Line),
    write(File, '.\n').
